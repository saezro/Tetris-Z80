# file opened: A:\Todo\Git\Tetris\Tetris-Z80\Tetris.asm
  1   0000
  2   0000              ; Rodrigo SÃ¡ez, Cristina FernÃ¡ndez, Claudia MartÃ­nez
  3   0000
  4   0000                DEVICE ZXSPECTRUM48
  5   0000              	SLDOPT COMMENT WPMEM, LOGPOINT, ASSERTION
  6   0000                  org $8000               ; Program is located from memory address $8000 = 32768
  7   8000
  8   8000              begin:
  9   8000 F3               di              ; Disable Interrupts
 10   8001 31 00 00         ld sp, 0         ; Set stack pointer to top of ram (RAMTOP)
 11   8004
 12   8004              ;-------------------------------------------------------------------------------------------------
 13   8004              ; Student Code
 14   8004
 15   8004 01           Acceptkey: db 1
 16   8005 00           Key: db 0
 17   8006 00           aux: db 0
 18   8007
 19   8007              keyW equ 1
 20   8007              keyS equ 2
 21   8007              keyD equ 3
 22   8007              keyA equ 4
 23   8007              keyE equ 5
 24   8007              keyQ equ 6
 25   8007              keySp equ 7
 26   8007
 27   8007              ;------------------------------------------------------------------
 28   8007              GameStatusStruct:
 29   8007              ;------------------------------------------------------------------
 30   8007 00           GameX: db 0 ; X position of current tetromino
 31   8008 00           GameY: db 0 ; Y position of current tetromino
 32   8009 00 00        TetroPtr: dw 0 ; Pointer to current tetromino
 33   800B 00 00        NewTetroPtr: dw 0 ; Pointer to current tetromino
 34   800D
 35   800D
 36   800D              start:
 37   800D DD 21 EF 8A      ld ix, Welcometext ;	aims to the string
 38   8011 3E 4D            ld a, %01001101		 ;	color
 39   8013 CD FF 86         call printtext     ;	prints the first screen
 40   8016 06 10            ld b, 16					 ; Y of where is going to be printed
 41   8018 0E 02            ld c, 2						 ; X of where is going to be printed
 42   801A 3E 05            ld a, %0000101
 43   801C DD 21 B9 8B      ld ix, pressText
 44   8020 CD 1F 87         call PRINTAT        ; Print a string in a position and attributes as per registers (MATERIAL FROM CANVAS)
 45   8023 CD AE 80         call waitKey				; waits for a key to be pressed (The spacebar)
 46   8026 CD A3 87         call CLEARSCR				; The screen is cleared
 47   8029
 48   8029              Tutorialtexts:						;prints the second screen (TUTORIAL OF THE KEYS)
 49   8029 DD 21 3B 8B      ld ix, TutorialText   ; aims to the string
 50   802D 3E 07            ld a, %0000111 		    ; color
 51   802F 06 04            ld b, 4               ; Y
 52   8031 0E 02            ld c, 2	              ; X
 53   8033 CD 1F 87         call PRINTAT          ; Print the string
 54   8036 06 08            ld b, 8			  			  ; the rest of the code of this function is the same
 55   8038 0E 02            ld c, 2
 56   803A 3E 07            ld a, %0000111
 57   803C DD 21 45 8B      ld ix, tutText
 58   8040 CD 1F 87         call PRINTAT
 59   8043 06 10            ld b, 16
 60   8045 0E 02            ld c, 2
 61   8047 3E 05            ld a, %0000101
 62   8049 DD 21 B9 8B      ld ix, pressText ;
 63   804D CD 1F 87         call PRINTAT
 64   8050 CD AE 80         call waitKey
 65   8053 CD A3 87         call CLEARSCR
 66   8056              restart:
 67   8056 CD CE 86         call hrBKG					; fills the full screen with a char pattern (blockgraph)(MATERIAL FROM CANVAS)
 68   8059 CD 6F 80         call gameboard 			; prints the gameboard
 69   805C 06 02            ld b, 2
 70   805E 0E 16            ld c, 22
 71   8060 3E EB            ld a, %11101011     ;%11101011 pink-blue. The color blinks and changes.
 72   8062 DD 21 34 8B      ld ix, Tetristext   ; The word "TETRIS" is painten on screen
 73   8066 CD 1F 87         call PRINTAT
 74   8069 C3 A5 80         jp main							; jumps to the main
 75   806C
 76   806C              loop:
 77   806C C3 E3 80         jp Readkey
 78   806F
 79   806F              gameboard:                  ; prints the gameboard with all ther parts (blueframe, blackframe, title)
 80   806F              frame:
 81   806F 3E 01            ld a, 1
 82   8071 D3 FE            out ($fe), a    ; blue border
 83   8073 3E 01            ld a, 1         ;color
 84   8075 06 17            ld b, 23        ; y
 85   8077              looptetrisblueframe:
 86   8077 0E 00            ld c, 0         ;x
 87   8079 16 1F            ld d, 31        ;long
 88   807B CD BB 85         call line
 89   807E 10 F7            djnz looptetrisblueframe
 90   8080 06 00            ld b, 0
 91   8082 0E 00            ld c, 0
 92   8084 16 1F            ld d, 31
 93   8086 CD BB 85         call line
 94   8089                  ;************
 95   8089 06 16            ld b, 22
 96   808B 3E 00            ld a, 0
 97   808D              looptetrisblackframe:
 98   808D 0E 02            ld c, 2
 99   808F 16 0F            ld d, 15
100   8091 CD BB 85         call line
101   8094 10 F7            djnz looptetrisblackframe
102   8096 06 02            ld b, 2
103   8098 3E EB            ld a, %11101011         ;%11101011 pink-blue blinking
104   809A              title:
105   809A 0E 16            ld c, 22
106   809C 16 05            ld d, 5
107   809E CD A9 85         call lineHD             ;line without multipliying the color
108   80A1 CD 45 83         call WindowTuto
109   80A4 C9               ret
110   80A5
111   80A5              main:
112   80A5 CD B4 82         call Random  ;creates a new random tetromino to be used in the next turn
113   80A8 3E 00            ld a, 0
114   80AA F5               push af
115   80AB C3 44 82         jp firstTetro
116   80AE
117   80AE              waitKey:                ;loop that ends when a key is pressed
118   80AE 06 10            ld b, 16
119   80B0 0E 02            ld c, 2
120   80B2 3E 05            ld a, %0000101      ; color cyan
121   80B4 DD 21 F5 8B      ld ix, pressText3   ;prints the presstext 3 times to create the animation of the 3 dots
122   80B8 CD 1F 87         call PRINTAT
123   80BB 06 10            ld b, 16
124   80BD 0E 02            ld c, 2
125   80BF 3E 05            ld a, %0000101
126   80C1 DD 21 D7 8B      ld ix, pressText2
127   80C5 CD 1F 87         call PRINTAT
128   80C8 01 FE 7F         ld bc, $7FFE ; spacebar
129   80CB ED 78            in a, (c)
130   80CD E6 1F            and $1F
131   80CF FE 1F            cp $1F
132   80D1 20 0F            jr nz, endwait
133   80D3 06 10            ld b, 16
134   80D5 0E 02            ld c, 2
135   80D7 3E 05            ld a, %0000101
136   80D9 DD 21 B9 8B      ld ix, pressText
137   80DD CD 1F 87         call PRINTAT
138   80E0 18 CC            jr waitKey
139   80E2              endwait:
140   80E2 C9               ret
141   80E3              ;------------------------------------------------------------------------------------
142   80E3              ;                                       KEYBOARD
143   80E3              ;------------------------------------------------------------------------------------
144   80E3              Readkey:
145   80E3 F5               push af
146   80E4 3A 04 80         ld a, (Acceptkey)      ; Load the value of Acceptkey into register a
147   80E7 FE 00            cp 0                   ; Compare with 0
148   80E9 20 2E            jr nz, iniRead         ; if it's not 0 it will go to iniRead
149   80EB C5               push bc
150   80EC 01 FE FB         ld bc, $FBFE ; QWE
151   80EF ED 78            in a, (c)
152   80F1 E6 1F            and $1F
153   80F3 FE 1F            cp $1F
154   80F5 20 1D            jr nz, endtec
155   80F7 01 FE FD         ld bc, $FDFE ; ASD
156   80FA ED 78            in a, (c)
157   80FC E6 1F            and $1F
158   80FE FE 1F            cp $1F
159   8100 20 12            jr nz, endtec
160   8102 01 FE 7F         ld bc, $7FFE ; spacebar
161   8105 ED 78            in a, (c)
162   8107 E6 1F            and $1F
163   8109 FE 1F            cp $1F
164   810B 20 07            jr nz, endtec
165   810D 3E 01            ld a, 1
166   810F 32 04 80         ld (Acceptkey), a
167   8112 D3 FE            out ($fe), a
168   8114
169   8114              endtec:
170   8114 C1               pop bc
171   8115              endRead:
172   8115 F1               pop af
173   8116 C3 6C 80         jp loop
174   8119
175   8119              iniRead:                ;identify the key pressed
176   8119 CD 1F 85         call savePos
177   811C 3E 00            ld a, 0                ; Load value zero into register a
178   811E 32 05 80         ld (Key), A            ; Store that zero in the variable Key
179   8121 3E FB            ld a, $FB
180   8123 DB FE            in a, ($FE)            ; input the key fromn that port
181   8125 CB 4F            bit 1, A               ; with 'bit' we check that is the key w
182   8127 CA 5D 81         jp z, isW              ; if it returns a 0, it jumps to isW
183   812A CB 47            bit 0, a
184   812C CA 06 82         jp z, isQ              ; checks the bit
185   812F CB 57            bit 2, a
186   8131 CA DD 81         jp z, isE
187   8134 3E FD            ld a, $FD
188   8136 DB FE            in a, ($FE)
189   8138 CB 4F            bit 1, A
190   813A CA 8C 81         jp z, isS
191   813D CB 57            bit 2, A
192   813F CA 73 81         jp z, isD
193   8142 CB 47            bit 0, A
194   8144 CA C4 81         jp z, isA
195   8147 3E 7F            ld a, $7F
196   8149 DB FE            in a, ($FE)
197   814B CB 47            bit 0, A
198   814D CA 53 81         jp z, isSp
199   8150 C3 15 81         jp endRead
200   8153
201   8153              isSp:
202   8153 3E 07            ld a, 7
203   8155 32 05 80         ld (Key), A          ;loads 7 into key to do a loop in isS
204   8158 3E 00            ld a, 0
205   815A C3 8C 81         jp isS               ;like pressing S makes the tetromino go down
206   815D
207   815D              isW:
208   815D CD 1F 85         call savePos        ; the position is saved
209   8160 3E 01            ld a, keyW          ; Load variable keyW in register a
210   8162 F5               push af
211   8163 CD 8E 84         call DeleteTetromino    ;first deletes the tetromino to make sure doesnt collides with himself
212   8166 05               dec b
213   8167 CD 3C 85         call hasCollision       ; detects if collides with something, register A has the color of the colision, if is 0 then theres no colision
214   816A FE 00            cp 0
215   816C C2 12 84         jp nz, Undo         ; if colides goes to undo to restore the position
216   816F F1               pop af
217   8170 C3 2F 82         jp saveKey          ; jumps to saveKey to save that key
218   8173
219   8173              isD:
220   8173 CD 1F 85         call savePos
221   8176 3E 03            ld a, keyD
222   8178 F5               push af
223   8179 CD 8E 84         call DeleteTetromino
224   817C 0C               inc c
225   817D CD 3C 85         call hasCollision
226   8180 FE 00            cp 0
227   8182 C2 12 84         jp nz, Undo
228   8185 F1               pop af
229   8186 C3 8C 81         jp isS
230   8189 C3 2F 82         jp saveKey
231   818C
232   818C              isS:
233   818C CD 1F 85         call savePos
234   818F 3E 02            ld a, keyS
235   8191 F5               push af
236   8192 CD 8E 84         call DeleteTetromino
237   8195 04               inc b
238   8196 CD 3C 85         call hasCollision
239   8199 FE 00            cp 0
240   819B C2 3D 82         jp nz, endTurn          ; if colides means it cant move anymore so the turn ends
241   819E CD 8E 84         call DeleteTetromino
242   81A1 04               inc b
243   81A2 CD 3C 85         call hasCollision   ;checks the collision with y-1 again to make sure it doesnt move more next move, so if collides now doesnt
244   81A5 FE 00            cp 0                ;need a step of "confirmation" to end the turn
245   81A7 C2 3D 82         jp nz, endTurn
246   81AA 05               dec b
247   81AB DD E5            push ix
248   81AD DD 21 05 80      ld ix, Key          ; if the key pressed was "Spacebar" (7), means it needs to go down until collides
249   81B1 DD 7E 00         ld a, (ix)
250   81B4 FE 07            cp 7
251   81B6 CA BF 81         jp z, repS
252   81B9 DD E1            pop ix
253   81BB F1               pop af
254   81BC C3 2F 82         jp saveKey
255   81BF
256   81BF              repS:
257   81BF DD E1            pop ix
258   81C1 F1               pop af
259   81C2 18 C8            jr isS
260   81C4
261   81C4              isA:
262   81C4 CD 1F 85         call savePos
263   81C7 3E 04            ld a, keyA
264   81C9 F5               push af
265   81CA CD 8E 84         call DeleteTetromino
266   81CD 0D               dec c
267   81CE CD 3C 85         call hasCollision
268   81D1 FE 00            cp 0
269   81D3 C2 12 84         jp nz, Undo
270   81D6 F1               pop af
271   81D7 C3 8C 81         jp isS
272   81DA C3 2F 82         jp saveKey
273   81DD
274   81DD              isE:
275   81DD CD 1F 85         call savePos
276   81E0 3E 05            ld a, keyE
277   81E2 F5               push af
278   81E3 C5               push bc
279   81E4 DD E5            push ix
280   81E6 CD 8E 84         call DeleteTetromino    ;to rotate we need also to delete it first
281   81E9 01 05 00         ld bc, ptrOffsetRR      ;we change the ptr to the offset to the right
282   81EC E5 DD E1         ld ix, hl
283   81EF DD 09            add ix, bc
284   81F1 DD 6E 00 DD      ld hl, (ix)
284   81F5 66 01
285   81F7 DD E1            pop ix
286   81F9 C1               pop bc
287   81FA CD 3C 85         call hasCollision
288   81FD FE 00            cp 0
289   81FF C2 12 84         jp nz, Undo             ; if now collides goes back
290   8202 F1               pop af
291   8203 C3 2F 82         jp saveKey
292   8206
293   8206              isQ:
294   8206 CD 1F 85         call savePos
295   8209 3E 06            ld a, keyQ
296   820B F5               push af
297   820C C5               push bc
298   820D DD E5            push ix
299   820F CD 8E 84         call DeleteTetromino
300   8212 01 03 00         ld bc, ptrOffsetRL
301   8215 E5 DD E1         ld ix, hl
302   8218 DD 09            add ix, bc
303   821A DD 6E 00 DD      ld hl, (ix)
303   821E 66 01
304   8220 DD E1            pop ix
305   8222 C1               pop bc
306   8223 CD 3C 85         call hasCollision
307   8226 FE 00            cp 0
308   8228 C2 12 84         jp nz, Undo
309   822B F1               pop af
310   822C C3 2F 82         jp saveKey
311   822F
312   822F              saveKey:
313   822F 32 05 80         ld (Key), A          ; We store what we have in register a in the variable Key
314   8232 3E 00            ld a, 0              ; Load 0 in register a
315   8234 32 04 80         ld (Acceptkey), a    ; Store 0 in the variable Acceptkey
316   8237 CD 3A 84         call DrawTetromino
317   823A C3 15 81         jp endRead
318   823D
319   823D              endTurn:
320   823D 05               dec b
321   823E CD 3A 84         call DrawTetromino  ;if the turn ends it draw it again
322   8241 CD AC 83         call Checklines       ; if a new tetromino is pressed we need to check if a line is completed
323   8244              firstTetro:
324   8244 DD E5            push ix
325   8246 DD 21 0B 80      ld ix, NewTetroPtr
326   824A DD 6E 00 DD      ld hl,(ix)              ; loads hl with the new ptr that was shown in the screen
326   824E 66 01
327   8250 DD E1            pop ix
328   8252 CD B4 82         call Random             ; creates a new tetromino randomly
329   8255 06 02            ld b, 2
330   8257 0E 08            ld c, 8
331   8259 F1               pop af
332   825A CD 3C 85         call hasCollision
333   825D FE 00            cp 0
334   825F C2 75 82         jp nz, endgame           ; if collides at the start means that the game ends
335   8262 04               inc b
336   8263 CD 3C 85         call hasCollision           ; like with the isS, checks the colision with y-1 because if has something below it ends the game
337   8266 05               dec b
338   8267 FE 00            cp 0
339   8269 C2 72 82         jp nz, endgame2
340   826C CD 1F 85         call savePos
341   826F C3 2F 82         jp saveKey
342   8272              endgame2:
343   8272 CD 3A 84         call DrawTetromino      ;if has something below can print the last tetromino (just to be shown)
344   8275              endgame:
345   8275 3E 02            ld a, 2
346   8277 D3 FE            out ($fe), a
347   8279 DD 21 CE 8A      ld ix, Endgametext
348   827D 3E 97            ld a, %10010111
349   827F 06 0A            ld b, 10
350   8281 0E 00            ld c, 0
351   8283 CD 1F 87         call PRINTAT            ;show the end text
352   8286              pressloop:                  ;this waits until you release the key to make sure you can see the end screen
353   8286 01 FE FB         ld bc, $FBFE ; QWE
354   8289 ED 78            in a, (c)
355   828B E6 1F            and $1F
356   828D FE 1F            cp $1F
357   828F 20 F5            jr nz, pressloop
358   8291 01 FE FD         ld bc, $FDFE ; ASD
359   8294 ED 78            in a, (c)
360   8296 E6 1F            and $1F
361   8298 FE 1F            cp $1F
362   829A 20 EA            jr nz, pressloop
363   829C 01 FE 7F         ld bc, $7FFE                ; Spacebar
364   829F ED 78            in a, (c)
365   82A1 E6 1F            and $1F
366   82A3 FE 1F            cp $1F
367   82A5 20 DF            jr nz, pressloop
368   82A7 CD AE 80         call waitKey        ;shows the press to continue text and waits until you press a key
369   82AA 3E 01            ld a, 1
370   82AC D3 FE            out ($fe), a
371   82AE CD A3 87         call CLEARSCR
372   82B1 C3 56 80         jp restart            ; clears the screen and starts again
373   82B4
374   82B4              ;------------------------------------------------------------------------------------
375   82B4              ;                               RANDOM TETROMINO
376   82B4              ;------------------------------------------------------------------------------------
377   82B4              Random:
378   82B4 E5               push hl
379   82B5              loopRandom: ; Javier Chocano. (First 4 lines of code given are uploaded in canvas for the student use)
380   82B5 ED 5F            ld a, r ; r is the “Refresh Register” for DRAM
381   82B7 E6 07            and 7 ; Keep only the three less significant bits
382   82B9 FE 07            cp 7 ; Make sure the result is not 7 (we want 0..6)
383   82BB 28 F8            jr z, loopRandom ; Read r again if we got a 7
384   82BD FE 06            cp 6                ;depending on the number aims to the ptr
385   82BF 28 38            jr z, is6
386   82C1 FE 05            cp 5
387   82C3 28 2F            jr z, is5
388   82C5 FE 04            cp 4
389   82C7 28 26            jr z, is4
390   82C9 FE 03            cp 3
391   82CB 28 1D            jr z, is3
392   82CD FE 02            cp 2
393   82CF 28 14            jr z, is2
394   82D1 FE 01            cp 1
395   82D3 28 0B            jr z, is1
396   82D5 FE 00            cp 0
397   82D7 28 02            jr z, is0
398   82D9 18 DA            jr loopRandom
399   82DB              is0:
400   82DB 21 DD 85         ld hl, OB0       ; figure loaded in hl
401   82DE 18 1E            jr endRandom
402   82E0              is1:
403   82E0 21 E8 85         ld hl, IB0
404   82E3 18 19            jr endRandom
405   82E5              is2:
406   82E5 21 FE 85         ld hl, ZB0
407   82E8 18 14            jr endRandom
408   82EA              is3:
409   82EA 21 18 86         ld hl, SB0
410   82ED 18 0F            jr endRandom
411   82EF              is4:
412   82EF 21 32 86         ld hl, LB0
413   82F2 18 0A            jr endRandom
414   82F4              is5:
415   82F4 21 66 86         ld hl, JB0
416   82F7 18 05            jr endRandom
417   82F9              is6:
418   82F9 21 9A 86         ld hl, TB0
419   82FC 18 00            jr endRandom
420   82FE              endRandom:
421   82FE DD E5            push ix
422   8300 DD 21 0B 80      ld ix, NewTetroPtr
423   8304 DD 75 00 DD      ld (ix), hl
423   8308 74 01
424   830A CD 18 83         call NextWindowTetro    ;prints all black where is going to be printed
425   830D 06 07            ld b, 7
426   830F 0E 14            ld c, 20
427   8311 CD 3A 84         call DrawTetromino
428   8314 DD E1            pop ix
429   8316 E1               pop hl
430   8317 C9               ret
431   8318              ;------------------------------------------------------------------------------------
432   8318              ;                               WINDOW WITH THE NEXT TETRO
433   8318              ;------------------------------------------------------------------------------------
434   8318              NextWindowTetro:    ;prints with black the section of the next tetromino
435   8318 F5               push af
436   8319 C5               push bc
437   831A 3E 00            ld a, 0
438   831C 06 06            ld b, 6
439   831E 0E 13            ld c, 19
440   8320 16 05            ld d, 5
441   8322 CD BB 85         call line
442   8325 04               inc b
443   8326 0E 13            ld c, 19
444   8328 16 05            ld d, 5
445   832A CD BB 85         call line
446   832D 04               inc b
447   832E 0E 13            ld c, 19
448   8330 16 05            ld d, 5
449   8332 CD BB 85         call line
450   8335 04               inc b
451   8336 0E 13            ld c, 19
452   8338 16 05            ld d, 5
453   833A CD BB 85         call line
454   833D 04               inc b
455   833E 0E 13            ld c, 19
456   8340 16 05            ld d, 5
457   8342 C1               pop bc
458   8343 F1               pop af
459   8344 C9               ret
460   8345              ;------------------------------------------------------------------------------------
461   8345              ;                             WINDOW WITH THE KEYS
462   8345              ;------------------------------------------------------------------------------------
463   8345              WindowTuto:     ;prints the keys in the down left corner
464   8345 F5               push af
465   8346 C5               push bc
466   8347 3E 00            ld a, 0         ; color black loaded in a
467   8349 06 0F            ld b, 15
468   834B 0E 13            ld c, 19
469   834D 16 0A            ld d, 10
470   834F CD BB 85         call line       ; the line is printed on screen
471   8352 04               inc b
472   8353 0E 13            ld c, 19
473   8355 16 0A            ld d, 10
474   8357 CD BB 85         call line
475   835A 04               inc b           ; the position of b increases
476   835B 0E 13            ld c, 19
477   835D 16 0A            ld d, 10
478   835F CD BB 85         call line
479   8362 04               inc b
480   8363 0E 13            ld c, 19
481   8365 16 0A            ld d, 10
482   8367 CD BB 85         call line
483   836A 04               inc b
484   836B 0E 13            ld c, 19
485   836D 16 0A            ld d, 10
486   836F CD BB 85         call line
487   8372 04               inc b
488   8373 0E 13            ld c, 19
489   8375 16 0A            ld d, 10
490   8377 CD BB 85         call line
491   837A 04               inc b
492   837B 0E 13            ld c, 19
493   837D 16 0A            ld d, 10
494   837F CD BB 85         call line
495   8382 DD 21 13 8C      ld ix, ingameTutText1       ;prints the letters of the keys
496   8386 3E 06            ld a, %0000110
497   8388 06 10            ld b, 16
498   838A 0E 14            ld c, 20
499   838C CD 1F 87         call PRINTAT
500   838F 06 12            ld b, 18
501   8391 0E 14            ld c, 20
502   8393 3E 06            ld a, %0000110
503   8395 DD 21 1B 8C      ld ix, ingameTutText2
504   8399 CD 1F 87         call PRINTAT
505   839C 06 14            ld b, 20
506   839E 0E 14            ld c, 20
507   83A0 3E 06            ld a, %0000110
508   83A2 DD 21 23 8C      ld ix, ingameTutText3
509   83A6 CD 1F 87         call PRINTAT
510   83A9 C1               pop bc
511   83AA F1               pop af
512   83AB C9               ret
513   83AC              ;------------------------------------------------------------------------------------
514   83AC              ;                                       CHECK LINES
515   83AC              ;------------------------------------------------------------------------------------
516   83AC              Checklines:             ;checks if the lines are complete
517   83AC E5               push hl
518   83AD C5               push bc
519   83AE F5               push af
520   83AF 06 16            ld b, 22
521   83B1 0E 02            ld c, 2
522   83B3              loopChecklines:
523   83B3 CD 8F 85         call isBlack
524   83B6 FE 00            cp 0
525   83B8 CA C4 83         jp z, noline        ;if just one its black goes to next line
526   83BB 0C               inc c
527   83BC 79               ld a, c
528   83BD FE 12            cp 18
529   83BF CA D6 83         jp z, isline        ;if all are color deletes the line
530   83C2 18 EF            jr loopChecklines
531   83C4              noline:                 ;if 1 is black first checks if theres more lines to check
532   83C4 0E 02            ld c, 2
533   83C6 05               dec b
534   83C7 78               ld a, b
535   83C8 FE 02            cp 2
536   83CA CA F7 83         jp z, endCheckLine
537   83CD 18 E4            jr loopChecklines   ;goes to next line
538   83CF              newline:
539   83CF 05               dec b
540   83D0 78               ld a, b
541   83D1 FE 02            cp 2
542   83D3 CA F7 83         jp z, endCheckLine
543   83D6              isline:
544   83D6 3E 07            ld a, 7
545   83D8 D3 FE            out ($fe), a
546   83DA 3E 00            ld a, 0
547   83DC 0E 02            ld c, 2
548   83DE 16 0F            ld d, 15
549   83E0 CD BB 85         call line ; we paint the row in black
550   83E3 0E 02            ld c, 2
551   83E5
552   83E5              moveLines:          ; chakes the color of the pixel and goes 1 down to paste the same color, moving all down 1 line
553   83E5 05               dec b
554   83E6 CD 8F 85         call isBlack
555   83E9 04               inc b
556   83EA CD FB 83         call posMem
557   83ED 77               ld (hl), a
558   83EE 0C               inc c
559   83EF 79               ld a, c
560   83F0 FE 12            cp 18
561   83F2 CA CF 83         jp z, newline
562   83F5 18 EE            jr moveLines
563   83F7
564   83F7              endCheckLine:
565   83F7 F1               pop af
566   83F8 C1               pop bc
567   83F9 E1               pop hl
568   83FA C9               ret
569   83FB              ;------------------------------------------------------------------------------------
570   83FB              ;                               POSITION OF HL
571   83FB              ;------------------------------------------------------------------------------------
572   83FB              posMem:                     ;gives the memory position of the pixel
573   83FB                  ; HL=$5800 + 32*Y + X
574   83FB                  ; y (0-23) , x (0-31),
575   83FB                  ; y = b, x = c,
576   83FB F5               push af
577   83FC D5               push de
578   83FD C5               push bc
579   83FE                  ;   First part : 32*Y
580   83FE 26 00            ld h, 0
581   8400 68               ld l, b
582   8401 29               add hl, hl  ; 2^5
583   8402 29               add hl, hl
584   8403 29               add hl, hl
585   8404 29               add hl, hl
586   8405 29               add hl, hl
587   8406                  ;   Second part: 32*Y + X
588   8406 16 00            ld d, 0
589   8408 59               ld e, c
590   8409 19               add hl, de
591   840A                  ;   Third part: $5800 + 32*Y + X
592   840A 11 00 58         ld de, $5800
593   840D 19               add hl, de
594   840E C1               pop bc
595   840F D1               pop de
596   8410 F1               pop af
597   8411 C9               ret
598   8412              ;------------------------------------------------------------------------------------
599   8412              ;                               UNDO
600   8412              ;------------------------------------------------------------------------------------
601   8412
602   8412              Undo:               ;loads the gamepositions before the move
603   8412 DD E5            push ix
604   8414 DD 21 07 80      ld ix, GameX
605   8418 DD 4E 00         ld c, (ix)
606   841B DD 21 08 80      ld ix, GameY
607   841F DD 46 00         ld b, (ix)
608   8422 DD 21 09 80      ld ix,TetroPtr
609   8426 DD 6E 00 DD      ld hl, (ix)
609   842A 66 01
610   842C DD E1            pop ix
611   842E F5               push af
612   842F 3E 02            ld a, 2
613   8431 D3 FE            out ($fe), a
614   8433 F1               pop af
615   8434 C3 8C 81         jp isS
616   8437 C3 2F 82         jp saveKey
617   843A              ;------------------------------------------------------------------------------------
618   843A              ;                               DRAW TETROMINO
619   843A              ;------------------------------------------------------------------------------------
620   843A              DrawTetromino:          ;prints the tetromino
621   843A C5               push bc
622   843B DD E5            push ix
623   843D E5               push hl
624   843E F5               push af
625   843F D5               push de
626   8440 C5               push bc
627   8441 7E               ld a, (hl) ; a = color
628   8442 23               inc hl
629   8443 5E               ld e, (hl) ; e = yfigura
630   8444 23               inc hl
631   8445 56               ld d, (hl) ; d = xfigura
632   8446 DD 21 06 80      ld ix, aux ; we save the value to restart it before
633   844A DD 72 00         ld (ix), d
634   844D 01 07 00         ld bc, ZB0Data - ZB0
635   8450 2B               dec hl
636   8451 2B               dec hl
637   8452 09               add hl, bc ; first position tetrominoData
638   8453 C1               pop bc
639   8454
640   8454              VectorXData:
641   8454 F5               push af
642   8455 7A               ld a, d  ; a = xfigura
643   8456 FE 00            cp 0
644   8458 CA 72 84         jp z, finfila ; if x = 0 ends vector
645   845B 7E               ld a, (hl)
646   845C FE 00            cp 0
647   845E C2 68 84         jp nz, draw             ;if was color in the array means it needs to be printed
648   8461 15               dec d ; xfigura--
649   8462 0C               inc c ; x in pantalla++
650   8463 F1               pop af
651   8464 23               inc hl
652   8465 C3 54 84         jp VectorXData
653   8468
654   8468              draw:
655   8468 F1               pop af
656   8469 CD E4 84         call DOTYXC             ;prints the color
657   846C 15               dec d
658   846D 0C               inc c
659   846E 23               inc hl
660   846F C3 54 84         jp VectorXData
661   8472
662   8472              finfila:
663   8472 7B               ld a, e ; a = yfigura
664   8473 FE 01            cp 1
665   8475 CA 86 84         jp z, endtetromino  ; if theres no more lines se termina el tetromino
666   8478 79               ld a, c
667   8479 DD 96 00         sub (ix)
668   847C 4F               ld c, a
669   847D DD 56 00         ld d, (ix) ; restart x
670   8480 1D               dec e  ;
671   8481 04               inc b  ; next position in screen
672   8482 F1               pop af
673   8483 C3 54 84         jp VectorXData
674   8486
675   8486              endtetromino:
676   8486 F1               pop af
677   8487 D1               pop de
678   8488 F1               pop af
679   8489 E1               pop hl
680   848A DD E1            pop ix
681   848C C1               pop bc
682   848D C9               ret
683   848E
684   848E              ;------------------------------------------------------------------------------------
685   848E              ;                               DELETE TETROMINO
686   848E              ;------------------------------------------------------------------------------------
687   848E
688   848E              DeleteTetromino:        ;same as draw but paints in black
689   848E C5               push bc
690   848F DD E5            push ix
691   8491 E5               push hl
692   8492 F5               push af
693   8493 D5               push de
694   8494 C5               push bc
695   8495 7E               ld a, (hl)
696   8496 23               inc hl
697   8497 5E               ld e, (hl)
698   8498 23               inc hl
699   8499 56               ld d, (hl)
700   849A DD 21 06 80      ld ix, aux
701   849E DD 72 00         ld (ix), d
702   84A1 01 07 00         ld bc, ZB0Data - ZB0
703   84A4 2B               dec hl
704   84A5 2B               dec hl
705   84A6 09               add hl, bc
706   84A7 C1               pop bc
707   84A8
708   84A8
709   84A8              VectorXData2:
710   84A8 F5               push af
711   84A9 7A               ld a, d
712   84AA FE 00            cp 0
713   84AC CA C8 84         jp z, finfila2
714   84AF 7E               ld a, (hl)
715   84B0 FE 00            cp 0
716   84B2 C2 BC 84         jp nz, draw2
717   84B5 15               dec d
718   84B6 0C               inc c
719   84B7 F1               pop af
720   84B8 23               inc hl
721   84B9 C3 A8 84         jp VectorXData2
722   84BC
723   84BC              draw2:
724   84BC F1               pop af
725   84BD 3E 00            ld a, 0             ; Paints the tetromino in black, erasing it.
726   84BF CD E4 84         call DOTYXC
727   84C2 15               dec d
728   84C3 0C               inc c
729   84C4 23               inc hl
730   84C5 C3 A8 84         jp VectorXData2
731   84C8
732   84C8              finfila2:
733   84C8 7B               ld a, e ; a = yfigura
734   84C9 FE 01            cp 1
735   84CB CA DC 84         jp z, endtetromino2  ;  if there aren't more rows, the tetromino ends
736   84CE 79               ld a, c
737   84CF DD 96 00         sub (ix)
738   84D2 4F               ld c, a
739   84D3 DD 56 00         ld d, (ix) ; we reset the value of x
740   84D6 1D               dec e  ;  yfigura is decreased
741   84D7 04               inc b  ; the next position on screen is increased
742   84D8 F1               pop af
743   84D9 C3 A8 84         jp VectorXData2
744   84DC
745   84DC              endtetromino2:
746   84DC F1               pop af
747   84DD D1               pop de
748   84DE F1               pop af
749   84DF E1               pop hl
750   84E0 DD E1            pop ix
751   84E2 C1               pop bc
752   84E3 C9               ret
753   84E4              ;------------------------------------------------------------------------------------
754   84E4              ;                               PIXEL ON SCREEN
755   84E4              ;------------------------------------------------------------------------------------
756   84E4
757   84E4              DOTYXC:             ; draw a pixel in the screen depending on the parameters introduced
758   84E4                  ; HL=$5800 + 32*Y + X
759   84E4                  ; y (0-23) , x (0-31), color (0-15)
760   84E4                  ; y = b, x = c, color = a
761   84E4 F5               push af
762   84E5 D5               push de
763   84E6 C5               push bc
764   84E7 E5               push hl
765   84E8                  ;   First part : 32*Y
766   84E8 26 00            ld h, 0
767   84EA 68               ld l, b
768   84EB 29               add hl, hl  ; 2^5
769   84EC 29               add hl, hl
770   84ED 29               add hl, hl
771   84EE 29               add hl, hl
772   84EF 29               add hl, hl
773   84F0                  ;   Second part: 32*Y + X
774   84F0 16 00            ld d, 0
775   84F2 59               ld e, c
776   84F3 19               add hl, de
777   84F4                  ;   Third part: $5800 + 32*Y + X
778   84F4 11 00 58         ld de, $5800
779   84F7 19               add hl, de
780   84F8                  ;   Forth part: Moves the color to the correct attribute positions
781   84F8                  ;   A=A*8
782   84F8 58               ld e, b
783   84F9 06 03            ld b, 3  ; although 2^3 = 8, b only worked with 2
784   84FB              colorx3:
785   84FB 87               add a
786   84FC 10 FD            djnz colorx3
787   84FE 43               ld b,e
788   84FF 77               ld (hl), a ; we paint the position of hl
789   8500 E1               pop hl
790   8501 C1               pop bc
791   8502 D1               pop de
792   8503 F1               pop af
793   8504 C9               ret
794   8505              ;------------------------------------------------------------------------------------
795   8505              ;                             PIXEL ON SCREEN (not changing the color)
796   8505              ;------------------------------------------------------------------------------------
797   8505              DOTYXCHD:             ; draw a pixel in the screen depending on the parameters introduced
798   8505                  ; HL=$5800 + 32*Y + X
799   8505                  ; y (0-23) , x (0-31), color (0-15)
800   8505                  ; y = b, x = c, color = a
801   8505 F5               push af
802   8506 D5               push de
803   8507 C5               push bc
804   8508 E5               push hl
805   8509                  ;   First part : 32*Y
806   8509 26 00            ld h, 0
807   850B 68               ld l, b
808   850C 29               add hl, hl  ; 2^5
809   850D 29               add hl, hl
810   850E 29               add hl, hl
811   850F 29               add hl, hl
812   8510 29               add hl, hl
813   8511                  ;   Second part: 32*Y + X
814   8511 16 00            ld d, 0
815   8513 59               ld e, c
816   8514 19               add hl, de
817   8515                  ;   Third part: $5800 + 32*Y + X
818   8515 11 00 58         ld de, $5800
819   8518 19               add hl, de
820   8519 77               ld (hl), a ; we paint the position of hl
821   851A E1               pop hl
822   851B C1               pop bc
823   851C D1               pop de
824   851D F1               pop af
825   851E C9               ret
826   851F
827   851F              savePos:            ;saves the actual values of the tetromino
828   851F DD E5            push ix
829   8521 DD 21 07 80      ld ix, GameX
830   8525 DD 71 00         ld (ix), c
831   8528 DD 21 08 80      ld ix, GameY
832   852C DD 70 00         ld (ix), b
833   852F DD 21 09 80      ld ix,TetroPtr
834   8533 DD 75 00 DD      ld (ix), hl
834   8537 74 01
835   8539 DD E1            pop ix
836   853B C9               ret
837   853C              ;-------------------------------------------------------------------------------------------------------
838   853C              ;                                                COLLISIONS
839   853C              ;-------------------------------------------------------------------------------------------------------
840   853C              hasCollision:       ;checks colisions with the screen
841   853C C5               push bc
842   853D DD E5            push ix
843   853F E5               push hl
844   8540 D5               push de
845   8541 C5               push bc
846   8542 23               inc hl
847   8543 5E               ld e, (hl)
848   8544 23               inc hl
849   8545 56               ld d, (hl)
850   8546 DD 21 06 80      ld ix, aux
851   854A DD 72 00         ld (ix), d
852   854D 01 07 00         ld bc, ZB0Data - ZB0
853   8550 2B               dec hl
854   8551 2B               dec hl
855   8552 09               add hl, bc
856   8553 C1               pop bc
857   8554
858   8554              VectorXDataColi:        ;same structure as the drawtetromino
859   8554 7A               ld a, d
860   8555 FE 00            cp 0
861   8557 CA 74 85         jp z, finfilaColi
862   855A 7E               ld a, (hl)
863   855B FE 00            cp 0
864   855D C2 66 85         jp nz, drawColi     ;if the position of the array has a one checks the screen
865   8560 15               dec d
866   8561 0C               inc c
867   8562 23               inc hl
868   8563 C3 54 85         jp VectorXDataColi
869   8566
870   8566              drawColi:
871   8566 CD 8F 85         call isBlack        ;if theres a color in the pixel means it collides
872   8569 FE 00            cp 0
873   856B C2 89 85         jp nz, endColi
874   856E 15               dec d
875   856F 0C               inc c
876   8570 23               inc hl
877   8571 C3 54 85         jp VectorXDataColi
878   8574
879   8574              finfilaColi:            ; looks if it is the end of the rows that has collisions
880   8574 7B               ld a, e
881   8575 FE 01            cp 1                ;checks if it is the last one
882   8577 CA 87 85         jp z, endtetrominoColi
883   857A 79               ld a, c
884   857B DD 96 00         sub (ix)            ; x is restored
885   857E 4F               ld c, a
886   857F DD 56 00         ld d, (ix)
887   8582 1D               dec e
888   8583 04               inc b
889   8584 C3 54 85         jp VectorXDataColi
890   8587
891   8587              endtetrominoColi:       ; the value of a is restored
892   8587 3E 00            ld a, 0
893   8589              endColi:
894   8589 D1               pop de
895   858A E1               pop hl
896   858B DD E1            pop ix
897   858D C1               pop bc
898   858E C9               ret
899   858F
900   858F              isBlack:                    ;returns
901   858F                  ; HL=$5800 + 32*Y + X
902   858F                  ; y (0-23) , x (0-31),
903   858F                  ; y = b, x = c,
904   858F E5               push hl
905   8590 F5               push af
906   8591 D5               push de
907   8592 C5               push bc
908   8593                  ;   First part : 32*Y
909   8593 26 00            ld h, 0
910   8595 68               ld l, b
911   8596 29               add hl, hl  ; 2^5
912   8597 29               add hl, hl
913   8598 29               add hl, hl
914   8599 29               add hl, hl
915   859A 29               add hl, hl
916   859B                  ;   Second part: 32*Y + X
917   859B 16 00            ld d, 0
918   859D 59               ld e, c
919   859E 19               add hl, de
920   859F                  ;   Third part: $5800 + 32*Y + X
921   859F 11 00 58         ld de, $5800
922   85A2 19               add hl, de
923   85A3 C1               pop bc
924   85A4 D1               pop de
925   85A5 F1               pop af
926   85A6 7E               ld a, (hl) ; save color
927   85A7 E1               pop hl
928   85A8 C9               ret
929   85A9
930   85A9              lineHD:
931   85A9 CD 05 85         call DOTYXCHD
932   85AC F5               push af             ; to use the register a without any changing
933   85AD 7A               ld a, d
934   85AE FE 00            cp 0                ; compares the value of a (d) with 0
935   85B0 CA B9 85         jp z, endlineHD       ; if they are the same z is activated
936   85B3 0C               inc c               ; x is increased
937   85B4 15               dec d               ; d is decreased
938   85B5 F1               pop af
939   85B6 C3 A9 85         jp lineHD
940   85B9              endlineHD:
941   85B9 F1               pop af
942   85BA C9               ret
943   85BB
944   85BB              line:
945   85BB CD E4 84         call DOTYXC
946   85BE F5               push af             ; to use the register a without any changing
947   85BF 7A               ld a, d
948   85C0 FE 00            cp 0                ; compares the value of a (d) with 0
949   85C2 CA CB 85         jp z, endline       ; if they are the same z is activated
950   85C5 0C               inc c               ; x is increased
951   85C6 15               dec d               ; d is decreased
952   85C7 F1               pop af
953   85C8 C3 BB 85         jp line
954   85CB              endline:
955   85CB F1               pop af
956   85CC C9               ret
957   85CD 18 FE        endofcode: jr endofcode
958   85CF                  include 'tetromino_blocks.asm'
# file opened: A:\Todo\Git\Tetris\Tetris-Z80\tetromino_blocks.asm
  1+  85CF              ; -----------------------------------------
  2+  85CF              ; Tetris Block Definitions (JMS, DL 2023)
  3+  85CF              ; Using doubly-linked circular list
  4+  85CF              ; Simplified representation
  5+  85CF              ; -----------------------------------------
  6+  85CF
  7+  85CF              NumBlocks      EQU 7               ; Different Tetrominos
  8+  85CF              offsetColor    EQU 0               ; offset from Block start to Color
  9+  85CF              offsetBY       EQU 1               ; offset from Block start to Y size of block
 10+  85CF              offsetBX       EQU 2               ; offset from Block start to X size of block
 11+  85CF              ptrOffsetRL    EQU 3               ; offset from Block start to Rotate Left pointer
 12+  85CF              ptrOffsetRR    EQU 5               ; offset from Block start to Rotate Right pointer
 13+  85CF              offsetData     EQU 7               ; offset from Block start to Block Data
 14+  85CF              BlockXSize     EQU 4               ; Max X size
 15+  85CF              BlockYSize     EQU 4               ; Max Y Size
 16+  85CF
 17+  85CF DD 85 E8 85  TETRISBLOCKS: DW OB0, IB0, ZB0, SB0, LB0, JB0, TB0     ; all blocks
 17+  85D3 FE 85 18 86
 17+  85D7 32 86 66 86
 17+  85DB 9A 86
 18+  85DD
 19+  85DD              ; O block   All four rotations are the same
 20+  85DD              OC:       EQU 6                    ; dark YELLOW
 21+  85DD 06 02 02     OB0:      DB OC, 2, 2              ; Color, Ysize, Xsize
 22+  85E0 DD 85 DD 85  OB0Ptr:   DW OB0, OB0              ; Pointer to left rotation, pointer to right rotation
 23+  85E4 01 01        OB0Data:  DB 1, 1
 24+  85E6 01 01                  DB 1, 1
 25+  85E8
 26+  85E8
 27+  85E8              ; I block   Vertical and horizontal rotations are the same among them
 28+  85E8              IC:       EQU 13                   ; bright CYAN
 29+  85E8 0D 01 04     IB0:      DB IC, 1, 4              ; Color, Ysize, Xsize
 30+  85EB F3 85 F3 85  IB0Ptr:   DW IB1, IB1              ; Pointer to left rotation, pointer to right rotation
 31+  85EF 01 01 01 01  IB0Data:  DB 1,1,1,1
 32+  85F3
 33+  85F3 0D 04 01     IB1:      DB IC, 4, 1              ; Color, Ysize, Xsize
 34+  85F6 E8 85 E8 85  IB1Ptr:   DW IB0, IB0              ; Pointer to left rotation, pointer to right rotation
 35+  85FA 01           IB1Data:  DB 1
 36+  85FB 01                     DB 1
 37+  85FC 01                     DB 1
 38+  85FD 01                     DB 1
 39+  85FE
 40+  85FE
 41+  85FE              ; Z block  Vertical and horizontal rotations are the same among them
 42+  85FE              ZC:       EQU 10                   ; bright RED
 43+  85FE 0A 02 03     ZB0:      DB ZC, 2, 3              ; Color, Ysize, Xsize
 44+  8601 0B 86 0B 86  ZB0Ptr:   DW ZB1, ZB1              ; Pointer to left rotation, pointer to right rotation
 45+  8605 01 01 00     ZB0Data:  DB 1,1,0
 46+  8608 00 01 01               DB 0,1,1
 47+  860B
 48+  860B 0A 03 02     ZB1:      DB ZC, 3, 2              ; Color, Ysize, Xsize
 49+  860E FE 85 FE 85  ZB1Ptr:   DW ZB0, ZB0              ; Pointer to left rotation, pointer to right rotation
 50+  8612 00 01        ZB1Data:  DB 0,1
 51+  8614 01 01                  DB 1,1
 52+  8616 01 00                  DB 1,0
 53+  8618
 54+  8618
 55+  8618              ; S block  Vertical and horizontal rotations are the same among them
 56+  8618              SC:       EQU 4                    ; dark GREEN
 57+  8618 04 02 03     SB0:      DB SC, 2, 3              ; Color, Ysize, Xsize
 58+  861B 25 86 25 86  SB0Ptr:   DW SB1, SB1              ; Pointer to left rotation, pointer to right rotation
 59+  861F 00 01 01     SB0Data:  DB 0,1,1
 60+  8622 01 01 00               DB 1,1,0
 61+  8625
 62+  8625 04 03 02     SB1:      DB SC, 3, 2              ; Color, Ysize, Xsize
 63+  8628 18 86 18 86  SB1Ptr:   DW SB0, SB0              ; Pointer to left rotation, pointer to right rotation
 64+  862C 01 00        SB1Data:  DB 1,0
 65+  862E 01 01                  DB 1,1
 66+  8630 00 01                  DB 0,1
 67+  8632
 68+  8632              ; L block   four rotations
 69+  8632              LC:       EQU 2                    ; dark RED
 70+  8632 02 02 03     LB0:      DB LC, 2, 3              ; Color, Ysize, Xsize
 71+  8635 59 86 3F 86  LB0Ptr:   DW LB3, LB1              ; Pointer to left rotation, pointer to right rotation
 72+  8639 00 00 01     LB0Data:  DB 0,0,1
 73+  863C 01 01 01               DB 1,1,1
 74+  863F
 75+  863F 02 03 02     LB1:      DB LC, 3, 2              ; Color, Ysize, Xsize
 76+  8642 32 86 4C 86  LB1Ptr:   DW LB0, LB2              ; Pointer to left rotation, pointer to right rotation
 77+  8646 01 00        LB1Data:  DB 1,0
 78+  8648 01 00                  DB 1,0
 79+  864A 01 01                  DB 1,1
 80+  864C
 81+  864C 02 02 03     LB2:      DB LC, 2, 3              ; Color, Ysize, Xsize
 82+  864F 3F 86 59 86  LB2Ptr:   DW LB1, LB3              ; Pointer to left rotation, pointer to right rotation
 83+  8653 01 01 01     LB2Data:  DB 1,1,1
 84+  8656 01 00 00               DB 1,0,0
 85+  8659
 86+  8659 02 03 02     LB3:      DB LC, 3, 2              ; Color, Ysize, Xsize
 87+  865C 4C 86 32 86  LB3Ptr:   DW LB2, LB0              ; Pointer to left rotation, pointer to right rotation
 88+  8660 01 01        LB3Data:  DB 1,1
 89+  8662 00 01                  DB 0,1
 90+  8664 00 01                  DB 0,1
 91+  8666
 92+  8666              ; J block   four rotations
 93+  8666              JC:       EQU 7                    ; bright BLUE
 94+  8666 07 02 03     JB0:      DB JC, 2, 3              ; Color, Ysize, Xsize
 95+  8669 8D 86 73 86  JB0Ptr:   DW JB3, JB1              ; Pointer to left rotation, pointer to right rotation
 96+  866D 01 00 00     JB0Data:  DB 1,0,0
 97+  8670 01 01 01               DB 1,1,1
 98+  8673
 99+  8673 07 03 02     JB1:      DB JC, 3, 2              ; Color, Ysize, Xsize
100+  8676 66 86 80 86  JB1Ptr:   DW JB0, JB2              ; Pointer to left rotation, pointer to right rotation
101+  867A 01 01        JB1Data:  DB 1,1
102+  867C 01 00                  DB 1,0
103+  867E 01 00                  DB 1,0
104+  8680
105+  8680 07 02 03     JB2:      DB JC, 2, 3              ; Color, Ysize, Xsize
106+  8683 73 86 8D 86  JB2Ptr:   DW JB1, JB3              ; Pointer to left rotation, pointer to right rotation
107+  8687 01 01 01     JB2Data:  DB 1,1,1
108+  868A 00 00 01               DB 0,0,1
109+  868D
110+  868D 07 03 02     JB3:      DB JC, 3, 2              ; Color, Ysize, Xsize
111+  8690 80 86 66 86  JB3Ptr:   DW JB2, JB0              ; Pointer to left rotation, pointer to right rotation
112+  8694 00 01        JB3Data:  DB 0,1
113+  8696 00 01                  DB 0,1
114+  8698 01 01                  DB 1,1
115+  869A
116+  869A              ; T block   four rotations
117+  869A              TC:       EQU 3                    ; dark MAGENTA
118+  869A 03 02 03     TB0:      DB TC, 2, 3              ; Color, Ysize, Xsize
119+  869D C1 86 A7 86  TB0Ptr:   DW TB3, TB1              ; Pointer to left rotation, pointer to right rotation
120+  86A1 00 01 00     TB0Data:  DB 0,1,0
121+  86A4 01 01 01               DB 1,1,1
122+  86A7
123+  86A7 03 03 02     TB1:      DB TC, 3, 2              ; Color, Ysize, Xsize
124+  86AA 9A 86 B4 86  TB1Ptr:   DW TB0, TB2              ; Pointer to left rotation, pointer to right rotation
125+  86AE 01 00        TB1Data:  DB 1,0
126+  86B0 01 01                  DB 1,1
127+  86B2 01 00                  DB 1,0
128+  86B4
129+  86B4 03 02 03     TB2:      DB TC, 2, 3              ; Color, Ysize, Xsize
130+  86B7 A7 86 C1 86  TB2Ptr:   DW TB1, TB3              ; Pointer to left rotation, pointer to right rotation
131+  86BB 01 01 01     TB2Data:  DB 1,1,1
132+  86BE 00 01 00               DB 0,1,0
133+  86C1
134+  86C1 03 03 02     TB3:      DB TC, 3, 2              ; Color, Ysize, Xsize
135+  86C4 B4 86 9A 86  TB3Ptr:   DW TB2, TB0              ; Pointer to left rotation, pointer to right rotation
136+  86C8 00 01        TB3Data:  DB 0,1
137+  86CA 01 01                  DB 1,1
138+  86CC 00 01                  DB 0,1
139+  86CE
# file closed: A:\Todo\Git\Tetris\Tetris-Z80\tetromino_blocks.asm
959   86CE                  include 'highResBackground.asm'
# file opened: A:\Todo\Git\Tetris\Tetris-Z80\highResBackground.asm
  1+  86CE              ;--------------------------------------------------------------------------------------------
  2+  86CE              ; Function hrBKG -  fills the full screen with a char pattern (blockgraph)
  3+  86CE              ;--------------------------------------------------------------------------------------------
  4+  86CE F5           hrBKG:			push af
  5+  86CF C5                           push bc
  6+  86D0 D5                           push de
  7+  86D1 E5                           push hl
  8+  86D2 DD E5                        push ix
  9+  86D4
 10+  86D4 21 00 40     				ld hl, $4000
 11+  86D7 16 00        				ld d, 0
 12+  86D9 01 00 18     				ld BC, $1800
 13+  86DC DD 21 F7 86  hrLp:			ld ix, blockgraph
 14+  86E0 7C                           ld a, h
 15+  86E1 E6 07                        and 7
 16+  86E3 5F                           ld e, a
 17+  86E4 DD 19        				add ix, de
 18+  86E6 DD 7E 00     				ld a, (ix)
 19+  86E9 77           				ld (hl),a
 20+  86EA 23                           inc hl
 21+  86EB 0B                           dec bc
 22+  86EC 78                           ld a, b
 23+  86ED B1                           or c
 24+  86EE 20 EC                        jr nz, hrLp
 25+  86F0
 26+  86F0 DD E1                        pop ix
 27+  86F2 E1                           pop hl
 28+  86F3 D1                           pop de
 29+  86F4 C1                           pop bc
 30+  86F5 F1                           pop af
 31+  86F6 C9                           ret
 32+  86F7
 33+  86F7 FF 81 81 85  blockgraph:	DEFB $FF, $81, $81, $85, $85, $9D, $81, $FF
 33+  86FB 85 9D 81 FF
# file closed: A:\Todo\Git\Tetris\Tetris-Z80\highResBackground.asm
960   86FF                  include 'TextDemo.asm'
# file opened: A:\Todo\Git\Tetris\Tetris-Z80\TextDemo.asm
  1+  86FF
  2+  86FF              printtext:
  3+  86FF                              ; FIRST EXAMPLE - Print a text
  4+  86FF                              ;--------------------------------------------------
  5+  86FF 06 0A                        ld b, 10        ; Row in register B
  6+  8701 0E 00                        ld c, 0         ; Column in register C
  7+  8703                              ;ld a, %01001101 ; Color in register A (Full 8-bit attributes: Flash, Brightness, Paper(3), Ink (3))
  8+  8703                                ; Text, ending with 0, pointed to by IX
  9+  8703 CD 1F 87                     call PRINTAT    ; Function to print text
 10+  8706
 11+  8706                              ; SECOND EXAMPLE - Print a row of a character
 12+  8706                              ;--------------------------------------------------
 13+  8706 06 0C                        ld b, 12        ; Row in register B
 14+  8708 0E 00                        ld c, 0         ; Initial column in register C
 15+  870A 3E 10                        ld a, %00010000 ; Color in register A (Full 8-bit attributes: Flash, Brightness, Paper(3), Ink (3))
 16+  870C CD 2E 87                     call PREP_PRT   ; Initialize text variables
 17+  870F 06 20                        ld b, 32        ; Prepare a loop of 32 iterations
 18+  8711 3E 80                        ld a, 128       ; Define the character to print. 128 is "brick", the first one right after the "text.asm" include
 19+  8713
 20+  8713 F5           PrintRow:       push af         ; Print char routine does not push/pop register, so we save them here
 21+  8714 C5                           push bc
 22+  8715 CD 6F 87                     call PRINTCHNUM ; Print a char and update cursor variables, moving it one to the right
 23+  8718 C1                           pop bc          ; Restore register B (loop) and register C, although C is not used here
 24+  8719 F1                           pop af          ; Restore A, containing the char to print
 25+  871A 10 F7                        djnz PrintRow   ; For loop
 26+  871C C9                           ret
 27+  871D
 28+  871D 18 FE        end:            jr end          ; end of program infinite loop
 29+  871F
 30+  871F                  include "text.asm"         ; Library for text printing
# file opened: A:\Todo\Git\Tetris\Tetris-Z80\text.asm
  1++ 871F              ; -------------------------------
  2++ 871F              ; ZX Spectrum Text print library
  3++ 871F              ; Daniel León - AOC - UFV 2020
  4++ 871F              ; -------------------------------
  5++ 871F
  6++ 871F
  7++ 871F              ; ----------------------------------------------------------------------------------------
  8++ 871F              ; PRINTAT - Print a string in a position and attributes as per registers:
  9++ 871F              ;		IN	A	: Bit 7=1 For Flash / Bit 6=1 For Brigh / Bit 5,4,3 for Paper / Bit 2,1,0 for Ink
 10++ 871F              ;		IN	B	: Row 0..23
 11++ 871F              ;		IN	C	: Column 0..31
 12++ 871F              ;		IN	IX	: Address of text (Text must end in a 0)
 13++ 871F              ; ----------------------------------------------------------------------------------------
 14++ 871F CD 2E 87     PRINTAT:	CALL PREP_PRT				; Update Attribute var &Screen & Attributes pointers
 15++ 8722              ; ----------------------------------------------------------------------------------------
 16++ 8722              ;		VVV Do not move PRINTSTR below as PRINTAT continues into PRINTSTR routine
 17++ 8722              ; ----------------------------------------------------------------------------------------
 18++ 8722              ; PRINTSTR - Prints String - IX Points to the String start
 19++ 8722              ; ----------------------------------------------------------------------------------------
 20++ 8722 DD 7E 00     PRINTSTR:   LD A,(IX)					; A Contains first char to print
 21++ 8725 B7           			OR A						; check for end of string (0)
 22++ 8726 C8           			RET Z						; Finish printing if 0
 23++ 8727 CD 6F 87     			CALL PRINTCHNUM
 24++ 872A DD 23        			INC IX						; Move to next char in string
 25++ 872C 18 F4        			JR PRINTSTR					; Start over printing sequence
 26++ 872E              ; ----------------------------------------------------------------------------------------
 27++ 872E
 28++ 872E
 29++ 872E              ;-----------------------------------------------------------------------------------------
 30++ 872E              ; PREP_PRT - Updates Print_Attr, SCR & ATTR Vars
 31++ 872E              ;-----------------------------------------------------------------------------------------
 32++ 872E 32 B5 87     PREP_PRT:	LD (PRINT_ATTR),A			; Set Attribute
 33++ 8731 CD 37 87     PREP_PRT_2:	CALL CRtoSCREEN
 34++ 8734 C3 49 87     			JP CRtoATTR
 35++ 8737              ;-----------------------------------------------------------------------------------------
 36++ 8737
 37++ 8737              ;-----------------------------------------------------------------------------------------
 38++ 8737              ; CRtoSCREEN - Converts a scr char coord into a SCREEN Address   b,c = y,x positions
 39++ 8737              ;	IN  - B=Row, C=Column
 40++ 8737              ;	OUT - HL=Address in screen also stored in (SCR_CUR_PTR)
 41++ 8737              ;	Conversion:
 42++ 8737              ;			Row FFfff   Column CCCCC
 43++ 8737              ;			HL=%010FF000 fffCCCCC
 44++ 8737              ;-----------------------------------------------------------------------------------------
 45++ 8737              CRtoSCREEN:
 46++ 8737 78           			LD A,B						; %___FFfff
 47++ 8738 F6 40        			OR #40						; %010FFfff
 48++ 873A E6 F8        			AND #F8						; %010FF000
 49++ 873C 67           			LD H,A
 50++ 873D
 51++ 873D 78           			LD A,B						; %___FFfff
 52++ 873E E6 07        			AND #7						; %00000fff
 53++ 8740 0F           			RRCA						; %f00000ff
 54++ 8741 0F           			RRCA						; %ff00000f
 55++ 8742 0F           			RRCA						; %fff00000
 56++ 8743 B1           			OR C						; %fffCCCCC
 57++ 8744 6F           			LD L,A
 58++ 8745 22 B1 87                 LD (SCR_CUR_PTR),HL			; Update Variable
 59++ 8748 C9                       RET
 60++ 8749              ; ----------------------------------------------------------------------------------------
 61++ 8749
 62++ 8749
 63++ 8749
 64++ 8749              ;-----------------------------------------------------------------------------------------
 65++ 8749              ; CRtoATTR - Converts a screen char coord  into a ATTR Address  b,c = y,x positions
 66++ 8749              ;	IN  - B=Row, C=Column
 67++ 8749              ;	OUT - HL=Address in screen also stored in (SCR_ATTR_PTR)
 68++ 8749              ;	Conversion:
 69++ 8749              ;			Row FFfff   Column CCCCC
 70++ 8749              ;			HL=%010110FF fffCCCCC
 71++ 8749              ;-----------------------------------------------------------------------------------------
 72++ 8749              CRtoATTR:
 73++ 8749 78           			LD A,B						; %___FFfff
 74++ 874A 0F           			RRCA						; %f000FFff
 75++ 874B 0F           			RRCA						; %ff000FFf
 76++ 874C 0F           			RRCA						; %fff000FF
 77++ 874D 6F           			LD L,A
 78++ 874E E6 03        			AND 3						; %000000FF	value of FF can be only 00,01,10
 79++ 8750 F6 58        			OR #58						; %010110FF value will be #58, #59 or #5A
 80++ 8752 67           			LD H,A
 81++ 8753
 82++ 8753 7D           			LD A,L						; %fff000FF
 83++ 8754 E6 E0        			AND #E0						; %fff00000
 84++ 8756 B1           			OR C						; %fffCCCCC
 85++ 8757 6F           			LD L,A
 86++ 8758
 87++ 8758 22 B3 87                 LD (SCR_ATTR_PTR),HL		; Update Variable
 88++ 875B C9                       RET
 89++ 875C              ; ----------------------------------------------------------------------------------------
 90++ 875C
 91++ 875C              ; ----------------------------------------------------------------------------------------
 92++ 875C              ; PRINTCHNUMAT - Prints Char pointed by IX
 93++ 875C              ;-----------------------------------------------------------------------------------------
 94++ 875C              PRINTCHNUMAT:
 95++ 875C F5           			PUSH AF
 96++ 875D C5           			PUSH BC
 97++ 875E D5           			PUSH DE
 98++ 875F E5           			PUSH HL
 99++ 8760 CD 2E 87     			CALL PREP_PRT
100++ 8763 DD 7E 00     			LD A, (IX)
101++ 8766 CD 6F 87     			CALL PRINTCHNUM
102++ 8769 E1           			POP HL
103++ 876A D1           			POP DE
104++ 876B C1           			POP BC
105++ 876C 0C           			INC C
106++ 876D F1           			POP AF
107++ 876E C9           			RET
108++ 876F
109++ 876F              ; ----------------------------------------------------------------------------------------
110++ 876F              ; PRINTCHNUM - Prints Char Number N (stored in A)
111++ 876F              ;-----------------------------------------------------------------------------------------
112++ 876F              PRINTCHNUM:
113++ 876F 26 00        			LD H,0						; Multiply value by 8 to get to right Char in Charset
114++ 8771 6F           			LD L,A
115++ 8772 29           			ADD HL,HL
116++ 8773 29           			ADD HL,HL
117++ 8774 29           			ADD HL,HL
118++ 8775 11 B6 86     			LD DE, CHARSET-(8*32)		; Optimize in compile time (instead of sub 32)
119++ 8778 19           			ADD HL,DE
120++ 8779 EB           			EX  DE,HL					;Value in DE
121++ 877A              			; Continues to printchar below
122++ 877A              ; ----------------------------------------------------------------------------------------
123++ 877A
124++ 877A
125++ 877A              ; ----------------------------------------------------------------------------------------
126++ 877A              ; PRINTCHAR - Prints Char  (DE points to the char. Uses HL as last Cur Pointer)
127++ 877A              ; ----------------------------------------------------------------------------------------
128++ 877A              PRINTCHAR:
129++ 877A 06 08        			LD B,8						; 8 Lines per char
130++ 877C 2A B1 87                 LD HL, (SCR_CUR_PTR)		; Load Cursor Pointer y,x
131++ 877F
132++ 877F 1A           BYTEPCHAR:	LD A,(DE)					; Get Char to be printed, first line
133++ 8780 77           			LD (HL),A					; Move to Printing location
134++ 8781 24                       INC H						; inc H so next line in char (ZX Spectrum Screen RAM)
135++ 8782 13                       INC DE 						; next line to be printed
136++ 8783 10 FA                    DJNZ BYTEPCHAR				; Repeat 8 lines
137++ 8785 3A B5 87                 LD A,(PRINT_ATTR) 			; Load Attributes to print char with
138++ 8788 2A B3 87                 LD HL, (SCR_ATTR_PTR)
139++ 878B 77                       LD (HL),A
140++ 878C 21 B3 87                 LD HL, SCR_ATTR_PTR			; Get pointer to ATTR
141++ 878F 34                       INC (HL)					; Move Attribute cursor to next char
142++ 8790 21 B1 87     			LD HL, SCR_CUR_PTR
143++ 8793 34           			INC (HL)					; update Cursor pointer to next position
144++ 8794 C9                       RET
145++ 8795              ; ----------------------------------------------------------------------------------------
146++ 8795
147++ 8795
148++ 8795
149++ 8795              ; ----------------------------------------------------------------------------------------
150++ 8795              ; INK2PAPER - moves ink of attribute stored in (PRINT_ATTR) to paper and sets ink to 0
151++ 8795              ; 				Sets bright 1 and flash 0
152++ 8795              ; ----------------------------------------------------------------------------------------
153++ 8795 3A B5 87     INK2PAPER:	LD A, (PRINT_ATTR)		    ; Get storedAttribute
154++ 8798 E6 07                    AND 7						; get Attr INK in A
155++ 879A 07           			RLCA
156++ 879B 07           			RLCA
157++ 879C 07           			RLCA						; move Ink to Paper
158++ 879D F6 40        			OR 64						; ink 0 bright 1
159++ 879F 32 B5 87     			LD (PRINT_ATTR),A		    ; Get storedAttribute
160++ 87A2 C9           			RET
161++ 87A3              ; ----------------------------------------------------------------------------------------
162++ 87A3
163++ 87A3
164++ 87A3
165++ 87A3
166++ 87A3 21 00 40     CLEARSCR:	LD HL,$4000					; Erases screen by writing 0 to all pixels and attributes
167++ 87A6 11 01 40     			LD DE,$4001
168++ 87A9 01 FF 1A     			LD BC,6911
169++ 87AC 36 00        			LD (HL),0
170++ 87AE ED B0        			LDIR
171++ 87B0 C9           			RET
172++ 87B1
173++ 87B1
174++ 87B1              SCR_CUR_PTR
174++ 87B1 00 00          	db $00, $00				; Cursor Pointer in Screen (2 bytes) (HL)
175++ 87B3 00 00        SCR_ATTR_PTR: 	db $00, $00				; Attr Pointer in Screen (2 bytes) (HL)
176++ 87B5 00           PRINT_ATTR:		db $00					; Attribute used by printchar routine (1 byte)
177++ 87B6
178++ 87B6              CHARSET: incbin "charset.bin"			; Charset used
179++ 8AB6
# file closed: A:\Todo\Git\Tetris\Tetris-Z80\text.asm
 31+  8AB6                                             ; Including the pixelwise definition for all characters (96 ASCII chars, from 32 (space) onwards)
 32+  8AB6                                             ; Right after this include, you may add custom chars as per the two shown below.
 33+  8AB6                                             ; Use the attached excel file to define these bytes easily
 34+  8AB6 FF 01 01 81  brick:          defb $FF, $01, $01, $81, $FF, $10, $10, $18; Brick pixel definition, defined as the next char: char 128
 34+  8ABA FF 10 10 18
 35+  8ABE 3C 42 A5 81  smiley:         defb $3C, $42, $A5, $81, $A5, $99, $42, $3C; Smiley pixel definition, defined as the next char: char 129
 35+  8AC2 A5 99 42 3C
 36+  8AC6 3C 42 A5 81  nosmiley:         defb $3C, $42, $A5, $81, $99,$A5, $42, $3C
 36+  8ACA 99 A5 42 3C
 37+  8ACE                              ; How to make a custom char: Shown, for readabilty sake, as a "." representing a 0, and a "@" representing a 1
 38+  8ACE                              ; Smiley Example
 39+  8ACE                              ; $3C --> 00111100  --> ..@@@@..
 40+  8ACE                              ; $42 --> 01000010  --> .@....@.
 41+  8ACE                              ; $A5 --> 10100101  --> @.@..@.@
 42+  8ACE                              ; $81 --> 10000001  --> @......@
 43+  8ACE                              ; $A5 --> 10100101  --> @.@..@.@
 44+  8ACE                              ; $99 --> 10011001  --> @..@@..@
 45+  8ACE                              ; $42 --> 01000010  --> .@....@.
 46+  8ACE                              ; $3C --> 00111100  --> ..@@@@..
 47+  8ACE
 48+  8ACE
 49+  8ACE 20 20 82 20  Endgametext:         defm "  ", 130, "        End game           ",130," ",0
 49+  8AD2 20 20 20 20
 49+  8AD6 20 20 20 45
 49+  8ADA 6E 64 20 67
 49+  8ADE 61 6D 65 20
 49+  8AE2 20 20 20 20
 49+  8AE6 20 20 20 20
 49+  8AEA 20 20 82 20
 49+  8AEE 00
 50+  8AEF 20 20 81 20  Welcometext:         defm "  ", 129, " Welcome to TETRIS by: ",129,"      Rodrigo, Claudia and Cristina      ",0
 50+  8AF3 57 65 6C 63
 50+  8AF7 6F 6D 65 20
 50+  8AFB 74 6F 20 54
 50+  8AFF 45 54 52 49
 50+  8B03 53 20 62 79
 50+  8B07 3A 20 81 20
 50+  8B0B 20 20 20 20
 50+  8B0F 20 52 6F 64
 50+  8B13 72 69 67 6F
 50+  8B17 2C 20 43 6C
 50+  8B1B 61 75 64 69
 50+  8B1F 61 20 61 6E
 50+  8B23 64 20 43 72
 50+  8B27 69 73 74 69
 50+  8B2B 6E 61 20 20
 50+  8B2F 20 20 20 20
 50+  8B33 00
 51+  8B34 54 65 74 72  Tetristext:         defm "Tetris",0
 51+  8B38 69 73 00
 52+  8B3B 54 75 74 6F  TutorialText:           defm "Tutorial:",0
 52+  8B3F 72 69 61 6C
 52+  8B43 3A 00
 53+  8B45 27 51 27 20  tutText:           defm "'Q'          ->rotate left      'E'          ->rotate right     'W''A''S''D' ->move             'Spacebar'   ->drop",0
 53+  8B49 20 20 20 20
 53+  8B4D 20 20 20 20
 53+  8B51 20 2D 3E 72
 53+  8B55 6F 74 61 74
 53+  8B59 65 20 6C 65
 53+  8B5D 66 74 20 20
 53+  8B61 20 20 20 20
 53+  8B65 27 45 27 20
 53+  8B69 20 20 20 20
 53+  8B6D 20 20 20 20
 53+  8B71 20 2D 3E 72
 53+  8B75 6F 74 61 74
 53+  8B79 65 20 72 69
 53+  8B7D 67 68 74 20
 53+  8B81 20 20 20 20
 53+  8B85 27 57 27 27
 53+  8B89 41 27 27 53
 53+  8B8D 27 27 44 27
 53+  8B91 20 2D 3E 6D
 53+  8B95 6F 76 65 20
 53+  8B99 20 20 20 20
 53+  8B9D 20 20 20 20
 53+  8BA1 20 20 20 20
 53+  8BA5 27 53 70 61
 53+  8BA9 63 65 62 61
 53+  8BAD 72 27 20 20
 53+  8BB1 20 2D 3E 64
 53+  8BB5 72 6F 70 00
 54+  8BB9 50 72 65 73  pressText:              defm "Press spacebar to continue.  ",0
 54+  8BBD 73 20 73 70
 54+  8BC1 61 63 65 62
 54+  8BC5 61 72 20 74
 54+  8BC9 6F 20 63 6F
 54+  8BCD 6E 74 69 6E
 54+  8BD1 75 65 2E 20
 54+  8BD5 20 00
 55+  8BD7 50 72 65 73  pressText2:              defm "Press spacebar to continue.. ",0
 55+  8BDB 73 20 73 70
 55+  8BDF 61 63 65 62
 55+  8BE3 61 72 20 74
 55+  8BE7 6F 20 63 6F
 55+  8BEB 6E 74 69 6E
 55+  8BEF 75 65 2E 2E
 55+  8BF3 20 00
 56+  8BF5 50 72 65 73  pressText3:              defm "Press spacebar to continue...",0
 56+  8BF9 73 20 73 70
 56+  8BFD 61 63 65 62
 56+  8C01 61 72 20 74
 56+  8C05 6F 20 63 6F
 56+  8C09 6E 74 69 6E
 56+  8C0D 75 65 2E 2E
 56+  8C11 2E 00
 57+  8C13 51 20 20 57  ingameTutText1:           defm "Q  W  E",0
 57+  8C17 20 20 45 00
 58+  8C1B 41 20 20 53  ingameTutText2:           defm "A  S  D",0
 58+  8C1F 20 20 44 00
 59+  8C23 53 70 61 63  ingameTutText3:           defm "Spacebar",0
 59+  8C27 65 62 61 72
 59+  8C2B 00
# file closed: A:\Todo\Git\Tetris\Tetris-Z80\TextDemo.asm
961   8C2C
962   8C2C
# file closed: A:\Todo\Git\Tetris\Tetris-Z80\Tetris.asm

Value    Label
------ - -----------------------------------------------------------
0x8AC6 X nosmiley
0x8ABE X smiley
0x8AB6 X brick
0x8795 X INK2PAPER
0x877F   BYTEPCHAR
0x877A X PRINTCHAR
0x87B6   CHARSET
0x875C X PRINTCHNUMAT
0x87B3   SCR_ATTR_PTR
0x87B1   SCR_CUR_PTR
0x8749   CRtoATTR
0x8737   CRtoSCREEN
0x8731 X PREP_PRT_2
0x87B5   PRINT_ATTR
0x8722   PRINTSTR
0x871D   end
0x876F   PRINTCHNUM
0x8713   PrintRow
0x872E   PREP_PRT
0x86F7   blockgraph
0x86DC   hrLp
0x86C8 X TB3Data
0x86C4 X TB3Ptr
0x86BB X TB2Data
0x86B7 X TB2Ptr
0x86AE X TB1Data
0x86B4   TB2
0x86AA X TB1Ptr
0x86A1 X TB0Data
0x86A7   TB1
0x86C1   TB3
0x869D X TB0Ptr
0x0003   TC
0x8694 X JB3Data
0x8690 X JB3Ptr
0x8687 X JB2Data
0x8683 X JB2Ptr
0x867A X JB1Data
0x8680   JB2
0x8676 X JB1Ptr
0x866D X JB0Data
0x8673   JB1
0x868D   JB3
0x8669 X JB0Ptr
0x0007   JC
0x8660 X LB3Data
0x865C X LB3Ptr
0x8653 X LB2Data
0x864F X LB2Ptr
0x8646 X LB1Data
0x864C   LB2
0x8642 X LB1Ptr
0x8639 X LB0Data
0x863F   LB1
0x8659   LB3
0x8635 X LB0Ptr
0x0002   LC
0x862C X SB1Data
0x8628 X SB1Ptr
0x861F X SB0Data
0x8625   SB1
0x861B X SB0Ptr
0x0004   SC
0x8612 X ZB1Data
0x860E X ZB1Ptr
0x860B   ZB1
0x8601 X ZB0Ptr
0x000A   ZC
0x85FA X IB1Data
0x85F6 X IB1Ptr
0x85EF X IB0Data
0x85F3   IB1
0x85EB X IB0Ptr
0x000D   IC
0x85E4 X OB0Data
0x85E0 X OB0Ptr
0x0006   OC
0x85CF X TETRISBLOCKS
0x0004 X BlockYSize
0x0004 X BlockXSize
0x0007 X offsetData
0x0002 X offsetBX
0x0001 X offsetBY
0x0000 X offsetColor
0x0007 X NumBlocks
0x85CD   endofcode
0x85CB   endline
0x85B9   endlineHD
0x8587   endtetrominoColi
0x8589   endColi
0x8566   drawColi
0x8554   VectorXDataColi
0x8505   DOTYXCHD
0x84FB   colorx3
0x84DC   endtetromino2
0x84BC   draw2
0x84C8   finfila2
0x8574   finfilaColi
0x84A8   VectorXData2
0x8486   endtetromino
0x84E4   DOTYXC
0x8468   draw
0x8472   finfila
0x8454   VectorXData
0x8605   ZB0Data
0x83FB   posMem
0x83E5   moveLines
0x83CF   newline
0x83F7   endCheckLine
0x83D6   isline
0x83C4   noline
0x858F   isBlack
0x83B3   loopChecklines
0x8C23   ingameTutText3
0x8C1B   ingameTutText2
0x8C13   ingameTutText1
0x8318   NextWindowTetro
0x869A   TB0
0x8666   JB0
0x8632   LB0
0x8618   SB0
0x85FE   ZB0
0x85E8   IB0
0x82FE   endRandom
0x85DD   OB0
0x82DB   is0
0x82E0   is1
0x82E5   is2
0x82EA   is3
0x82EF   is4
0x82F4   is5
0x82F9   is6
0x82B5   loopRandom
0x8286   pressloop
0x8ACE   Endgametext
0x8272   endgame2
0x8275   endgame
0x83AC   Checklines
0x843A   DrawTetromino
0x0003   ptrOffsetRL
0x0005   ptrOffsetRR
0x81BF   repS
0x823D   endTurn
0x822F   saveKey
0x8412   Undo
0x853C   hasCollision
0x848E   DeleteTetromino
0x8153   isSp
0x81C4   isA
0x8173   isD
0x818C   isS
0x81DD   isE
0x8206   isQ
0x815D   isW
0x851F   savePos
0x8115   endRead
0x8114   endtec
0x8119   iniRead
0x80E2   endwait
0x8BD7   pressText2
0x8BF5   pressText3
0x8244   firstTetro
0x82B4   Random
0x8345   WindowTuto
0x85A9   lineHD
0x809A X title
0x808D   looptetrisblackframe
0x85BB   line
0x8077   looptetrisblueframe
0x806F X frame
0x80E3   Readkey
0x806C   loop
0x80A5   main
0x8B34   Tetristext
0x806F   gameboard
0x86CE   hrBKG
0x8056   restart
0x8B45   tutText
0x8B3B   TutorialText
0x8029 X Tutorialtexts
0x87A3   CLEARSCR
0x80AE   waitKey
0x871F   PRINTAT
0x8BB9   pressText
0x86FF   printtext
0x8AEF   Welcometext
0x800D X start
0x800B   NewTetroPtr
0x8009   TetroPtr
0x8008   GameY
0x8007   GameX
0x8007 X GameStatusStruct
0x0007 X keySp
0x0006   keyQ
0x0005   keyE
0x0004   keyA
0x0003   keyD
0x0002   keyS
0x0001   keyW
0x8006   aux
0x8005   Key
0x8004   Acceptkey
0x8000 X begin
